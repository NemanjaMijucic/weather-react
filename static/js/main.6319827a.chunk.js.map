{"version":3,"sources":["Stat.js","CityScrool.js","Header.js","UI/Card.js","App.js","index.js"],"names":["Stat","props","icon","faGlobe","country","faCity","city","faThermometerHalf","Math","round","temp","main","className","descr","src","alt","CityScrool","useState","cityChange","setCityChange","onSubmit","e","preventDefault","selectedCity","onSaveCity","type","onChange","target","value","placeholder","Header","enteredCity","onAddCity","Card","children","App","longi","lati","setCountry","setTemp","setDescr","setMain","setCity","setIcon","useEffect","navigator","geolocation","getCurrentPosition","position","coords","longitude","latitude","console","log","axios","get","then","res","data","sys","name","weather","description","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6319827a.chunk.js","sourcesContent":["import React from 'react'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport { faThermometerHalf, faCity, faGlobe } from '@fortawesome/free-solid-svg-icons';\n\n const Stat = (props) => {\n    return (\n        <div>\n            <p>COUNTRY <FontAwesomeIcon icon={faGlobe} /> : {props.country}</p>\n            <p>CITY <FontAwesomeIcon icon={faCity} /> : {props.city}</p>\n            <p>TEMPERATURE  <FontAwesomeIcon icon={faThermometerHalf} /> : {Math.round(props.temp) - 271} C </p>\n            <p>GENERAL: {props.main}</p>\n            <div className=\"description\">\n                <p>DESCRIPTION: {props.descr} </p><img src={props.icon} alt='Loading...'></img>\n            </div>\n            \n        </div>\n    )\n}\n\n\nexport default Stat","import React, {useState} from \"react\";\n\nconst CityScrool = (props) => {\n    const [cityChange, setCityChange] = useState('')\n\n\n  const cityChangeHandler = (e) => {\n      e.preventDefault();\n\n      \n     let selectedCity = cityChange;\n     props.onSaveCity(selectedCity);\n     setCityChange('')\n  };\n\n  const getCityName = (e)=> {\n    e.preventDefault();\n\n    setCityChange(e.target.value);\n  }\n\n\n\n  return (\n    <div>\n      <form  onSubmit={cityChangeHandler}>\n        <input type=\"text\" onChange={getCityName} value={cityChange} placeholder='enter city name'></input>\n        <button type=\"submit\">\n          submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default CityScrool;\n","import React from \"react\";\nimport CityScrool from \"./CityScrool\";\n\nconst Header = (props) => {\n    const saveCityDataHandler = (selectedCity) => {\n      const enteredCity = selectedCity;\n  \n      props.onAddCity(enteredCity);\n    };\n  \n    return (\n      <div>\n        <h1>Weather App</h1>\n  \n        <CityScrool onSaveCity={saveCityDataHandler}></CityScrool>\n      </div>\n    );\n  };\n  \n  export default Header;\n  ","import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = (props) => {\n  return <div className=\"card\">{props.children}</div>;\n};\n\nexport default Card;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Stat from \"./Stat\";\nimport Header from \"./Header\";\nimport Card from \"./UI/Card\";\nimport axios from \"axios\";\n\nfunction App(longi, lati, props) {\n  const [country, setCountry] = useState(\"Loading...\");\n  const [temp, setTemp] = useState(\"0\");\n  const [descr, setDescr] = useState(\"Loading...\");\n  const [main, setMain] = useState(\"Loading...\");\n  const [city, setCity] = useState(\"Loading...\");\n  const [icon, setIcon] = useState(\"Loading...\")\n\n\n  //curent location weather info\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        let longi = position.coords.longitude;\n        let lati = position.coords.latitude;\n\n        console.log(longi, lati);\n\n        axios\n          .get(\n            `https://api.openweathermap.org/data/2.5/weather?lat=${lati}&lon=${longi}&appid=2c4ae810fb0582e5bfd2d6d93d8e708d`\n          )\n          .then((res) => {\n            setCountry(res.data.sys.country);\n            setTemp(res.data.main.temp);\n            setCity(res.data.name);\n            setDescr(res.data.weather[0].description);\n            setMain(res.data.weather[0].main);\n            setIcon(`http://openweathermap.org/img/wn/${res.data.weather[0].icon}@2x.png`)\n         \n\n            console.log(res.data);\n          });\n      });\n    }\n  }, [longi, lati]);\n\n  // For entered city weather info\n\n  const addCityName = (selectedCity) => {\n    axios\n      .get(\n        ` https://api.openweathermap.org/data/2.5/weather?q=${selectedCity}&appid=99da379ec37837415169a989511bccc0`\n      )\n      .then((res) => {\n        setCountry(res.data.sys.country);\n        setTemp(res.data.main.temp);\n        setCity(res.data.name);\n        setDescr(res.data.weather[0].description);\n        setMain(res.data.weather[0].main);\n        setIcon(`http://openweathermap.org/img/wn/${res.data.weather[0].icon}@2x.png`);\n      });\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <Card>\n        <Header onAddCity={addCityName}></Header>\n      </Card>\n      <Card>\n        <Stat\n          temp={temp}\n          country={country}\n          city={city}\n          descr={descr}\n          main={main}\n          icon={icon}\n        ></Stat>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}